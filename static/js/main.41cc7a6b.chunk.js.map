{"version":3,"sources":["components/Tasks/TasksItem.js","components/Statuses/StatusesItem.js","App.js","serviceWorker.js","index.js"],"names":["TasksItem","props","useState","task","setTask","title","name","substr","onStatusChange","e","updatedTask","statusId","target","value","updateTask","onDeleteTask","deleteTask","draggableId","id","toString","index","provided","snapshot","className","ref","innerRef","draggableProps","dragHandleProps","style","isDragging","draggableStyle","background","type","onClick","aria-label","aria-hidden","priority","htmlFor","defaultValue","onChange","initStatuses","map","el","key","StatusesItem","onDragEnd","result","destination","newOrderingTasks","reorder","tasks","source","setTasks","droppableId","droppableProps","status","placeholder","queue","initTasks","App","lastTaskId","setLastTaskId","isOpenCreateTaskForm","setIsOpenCreateTaskForm","isActiveButtonTaskCreate","setIsActiveButtonTaskCreate","taskName","setTaskName","taskReset","updatedTasks","obj","newTasks","filter","list","startIndex","endIndex","Array","from","splice","removed","length","preventDefault","newTask","disabled","sort","a","b","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.41cc7a6b.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport { Draggable } from 'react-beautiful-dnd';\r\n\r\nconst TasksItem = (props) => {\r\n\r\n    const [task, setTask] = useState(props.task);\r\n    // const [show, setShow] = useState(\"\");\r\n\r\n    const title = task.name.substr(0, 3) + \"...\";\r\n\r\n    const onPriorityUp = () => {\r\n        const updatedTask = {...task, priority: --task.priority};\r\n        setTask(updatedTask);\r\n        props.updateTask(updatedTask);\r\n    }\r\n\r\n    const onPriorityDown = () => {\r\n        const updatedTask = {...task, priority: ++task.priority}\r\n        setTask(updatedTask);\r\n        props.updateTask(updatedTask);\r\n    }\r\n\r\n    const onStatusChange = (e) => {\r\n        // e.preventDefault();\r\n        const updatedTask = {...task, statusId: +e.target.value};\r\n        setTask(updatedTask);\r\n        props.updateTask(updatedTask);\r\n        // setShow(\"\");\r\n    }\r\n\r\n    const onDeleteTask = () => {\r\n        props.deleteTask(task);\r\n    }\r\n\r\n    // const onToggleDropdown = (e) => {\r\n    //     e.preventDefault();\r\n    //     setShow(!show ? \" show\" : \"\");\r\n    // }\r\n\r\n    const getItemStyle = (isDragging, draggableStyle) => ({\r\n        // change background colour if dragging\r\n        background: isDragging ? \"lightgrey\" : \"\",\r\n\r\n        // styles we need to apply on draggables\r\n        ...draggableStyle\r\n    });\r\n\r\n\r\n    return (\r\n        <Draggable draggableId={task.id.toString()} index={props.index}>\r\n            {\r\n                (provided, snapshot)  => (\r\n                    <div className=\"card m-1\"\r\n                         ref={provided.innerRef}\r\n                        {...provided.draggableProps}\r\n                        {...provided.dragHandleProps}\r\n                        style={getItemStyle(\r\n                            snapshot.isDragging,\r\n                            provided.draggableProps.style\r\n                        )}\r\n                    >\r\n                        <div className=\"card-body\">\r\n                            <button type=\"button\" className=\"close text-right\" onClick={onDeleteTask} aria-label=\"Delete\">\r\n                                <span aria-hidden=\"true\">&times;</span>\r\n                            </button>\r\n                            <h5 className=\"card-title\">{title}</h5>\r\n                            <p className=\"card-text p-1\">\r\n                                {task.name}\r\n                            </p>\r\n                            <p className=\"card-text p-1\">\r\n                                Priority: {task.priority}\r\n                            </p>\r\n                            <div className=\"input-group input-group-sm mb-2 mt-2\">\r\n                                <div className=\"input-group-prepend\">\r\n                                    <label className=\"input-group-text\" htmlFor=\"inputGroupSelect01\">Status:</label>\r\n                                </div>\r\n                                <select className=\"custom-select\" id=\"inputGroupSelect01\" defaultValue={task.statusId} onChange={onStatusChange}>\r\n                                    {\r\n                                        props.initStatuses.map(el => {\r\n                                            return <option key={el.id} value={el.id}>{el.name}</option>\r\n                                        })\r\n                                    }\r\n                                </select>\r\n                            </div>\r\n                            {/*<div className=\"btn-group-vertical btn-group-sm\" aria-label={\"Priority: \" + task.priority}>*/}\r\n                            {/*    Priority: {task.priority}*/}\r\n                            {/*    {*/}\r\n                            {/*        task.priority > 1 &&*/}\r\n                            {/*        <button className=\"btn btn-secondary\" onClick={onPriorityUp} type=\"button\">Up</button>*/}\r\n                            {/*    }*/}\r\n                            {/*    {*/}\r\n                            {/*        task.priority < 10 &&*/}\r\n                            {/*        <button className=\"btn btn-secondary\" onClick={onPriorityDown} type=\"button\">Down</button>*/}\r\n                            {/*    }*/}\r\n                            {/*</div>*/}\r\n                        </div>\r\n                    </div>\r\n            )}\r\n        </Draggable>\r\n\r\n\r\n        // <div className=\"card m-1\">\r\n        //     <div className=\"card-body\">\r\n        //         <button type=\"button\" className=\"close text-right\" onClick={onDeleteTask} aria-label=\"Delete\">\r\n        //             <span aria-hidden=\"true\">&times;</span>\r\n        //         </button>\r\n        //         <h5 className=\"card-title\">{title}</h5>\r\n        //         <p className=\"card-text p-1\">\r\n        //             {task.name}\r\n        //         </p>\r\n        //         <div className=\"input-group input-group-sm mb-2 mt-2\">\r\n        //             <div className=\"input-group-prepend\">\r\n        //                 <label className=\"input-group-text\" htmlFor=\"inputGroupSelect01\">Status:</label>\r\n        //             </div>\r\n        //             <select className=\"custom-select\" id=\"inputGroupSelect01\" defaultValue={task.statusId} onChange={onStatusChange}>\r\n        //                 {\r\n        //                     props.initStatuses.map(el => {\r\n        //                         return <option key={el.id} value={el.id}>{el.name}</option>\r\n        //                     })\r\n        //                 }\r\n        //             </select>\r\n        //         </div>\r\n        //         <div className=\"btn-group-vertical btn-group-sm\" aria-label={\"Priority: \" + task.priority}>\r\n        //             Priority: {task.priority}\r\n        //             {\r\n        //                 task.priority > 1 &&\r\n        //                 <button className=\"btn btn-secondary\" onClick={onPriorityUp} type=\"button\">Up</button>\r\n        //             }\r\n        //             {\r\n        //                 task.priority < 10 &&\r\n        //                 <button className=\"btn btn-secondary\" onClick={onPriorityDown} type=\"button\">Down</button>\r\n        //             }\r\n        //         </div>\r\n        //         {/*This bootstrap dropdown doesn't work */}\r\n        //         {/*<div className=\"dropdown\">*/}\r\n        //         {/*    <button className=\"btn btn-secondary btn-sm dropdown-toggle\" type=\"button\" id=\"dropdownMenuButton\"*/}\r\n        //         {/*            data-toggle=\"dropdown\" aria-haspopup={true} aria-expanded={false}*/}\r\n        //         {/*            onClick={onToggleDropdown}>*/}\r\n        //         {/*        {props.initStatuses.map(el => {*/}\r\n        //         {/*            if(el.id === task.statusId)*/}\r\n        //         {/*                return el.name*/}\r\n        //         {/*        })}*/}\r\n        //         {/*    </button>*/}\r\n        //         {/*    <div className={\"dropdown-menu\" + show} aria-labelledby=\"dropdownMenuButton\">*/}\r\n        //         {/*        {*/}\r\n        //         {/*            props.initStatuses.filter(el =>*/}\r\n        //         {/*                el.id !== task.statusId*/}\r\n        //         {/*            ).map(el =>*/}\r\n        //         {/*                <a className=\"dropdown-item\" key={el.id} id={el.id} onClick={onStatusChange} href=\"#\">{el.name}</a>*/}\r\n        //         {/*            )*/}\r\n        //         {/*        }*/}\r\n        //         {/*    </div>*/}\r\n        //         {/*</div>*/}\r\n        //     </div>\r\n        // </div>\r\n    );\r\n};\r\n\r\nexport default TasksItem;","import React from 'react';\r\nimport TasksItem from \"../Tasks/TasksItem\";\r\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\r\n\r\nconst StatusesItem = (props) => {\r\n\r\n    const onDragEnd = (result) => {\r\n        if (!result.destination) {\r\n            return;\r\n        }\r\n        const newOrderingTasks = props.reorder(\r\n            props.tasks,\r\n            result.source.index,\r\n            result.destination.index\r\n        );\r\n\r\n        props.setTasks(newOrderingTasks);\r\n    }\r\n\r\n    return (\r\n        <DragDropContext onDragEnd={onDragEnd}>\r\n            <Droppable droppableId=\"droppable\">\r\n                {(provided, snapshot) => (\r\n                    <div className=\"col-sm-3 p-1\"\r\n                        {...provided.droppableProps}\r\n                        ref={provided.innerRef}\r\n                    >\r\n                    <h5 className=\"card-header text-center\">{props.status.name}</h5>\r\n                    {\r\n                        props.tasks\r\n                            // .sort((a, b) => { return a.priority - b.priority} )\r\n                            .map((task, index) => {\r\n                                if(task.statusId === props.status.id)\r\n                                    return (\r\n                                        <TasksItem key={task.id}\r\n                                                   index={index}\r\n                                                   initStatuses={props.initStatuses}\r\n                                                   task={task}\r\n                                                   updateTask={props.updateTask}\r\n                                                   deleteTask={props.deleteTask}\r\n                                        />\r\n                                    );\r\n                            })\r\n                    }\r\n                    {provided.placeholder}\r\n                    </div>\r\n                )}\r\n                </Droppable>\r\n        </DragDropContext>\r\n    );\r\n};\r\n\r\nexport default StatusesItem;","import React, {useState} from 'react';\nimport StatusesItem from \"./components/Statuses/StatusesItem\";\n\n//not so good variant\n// const tasks1 = {\n//     todo: [\n//         {name: 'Create F1', priority: 1},\n//         {name: 'Create F2', priority: 1}\n//         ],\n//     progress: [],\n//     review: [],\n//     done: []\n// };\n\n//good variant\n// const statuses = {\n//     s1: {name: 'To Do'},\n//     s2: {name: 'In Progress'},\n//     s3: {name: 'Review'},\n//     s4: {name: 'Done'},\n// }\n\nconst initStatuses = [\n    {id: 1, queue: 1, name: 'To Do'},\n    {id: 2, queue: 2, name: 'In Progress'},\n    {id: 3, queue: 3, name: 'Review'},\n    {id: 4, queue: 4, name: 'Done'}\n]\n//Many-to-one relation (many tasks to one status)\nconst initTasks = [\n    {id: 1, name: 'Aaa aaa aaa', priority: 1, statusId: 1},\n    {id: 2, name: 'Bbb bbb bbb', priority: 1, statusId: 2},\n    {id: 3, name: 'Ccc ccc ccc', priority: 2, statusId: 2},\n    {id: 4, name: 'Ddd ddd ddd', priority: 3, statusId: 3},\n    {id: 5, name: 'Eee eee eee', priority: 2, statusId: 3},\n    {id: 6, name: 'Fff fff fff', priority: 1, statusId: 3},\n    {id: 7, name: 'Ggg ggg ggd', priority: 3, statusId: 1},\n    {id: 8, name: 'Iii iii iii', priority: 2, statusId: 1},\n    {id: 9, name: 'Kkk kkk kkk', priority: 1, statusId: 4}\n];\n\nfunction App() {\n\n    const [tasks, setTasks] = useState(initTasks);\n    const [lastTaskId, setLastTaskId] = useState(9);\n    const [isOpenCreateTaskForm, setIsOpenCreateTaskForm] = useState(false);\n    const [isActiveButtonTaskCreate, setIsActiveButtonTaskCreate] = useState(false);\n    const [taskName, setTaskName] = useState('');\n\n    const onTaskChange = (e) => {\n        setIsActiveButtonTaskCreate(e.target.value.length > 4);\n        setTaskName(e.target.value);\n    }\n\n    const taskCreate = (e) => {\n        e.preventDefault();\n        const newTask = {\n            id: lastTaskId + 1,\n            name: taskName,\n            priority: 1,\n            statusId: 1\n\n        };\n        setLastTaskId(newTask.id);\n        setTasks([...tasks, newTask]);\n        taskReset();\n    }\n\n    const taskReset = (e) => {\n        setTaskName('');\n        setIsOpenCreateTaskForm(false);\n        setIsActiveButtonTaskCreate(false);\n    }\n\n    const updateTask = (task) => {\n        const updatedTasks = tasks.map(obj => {\n            if(obj.id === task.id){\n                return {...obj, name: task.name, priority: task.priority, statusId: task.statusId};\n            } else {\n                return obj;\n            }\n        })\n        setTasks(updatedTasks);\n    }\n\n    const deleteTask = (task) => {\n        const newTasks = tasks.filter(obj => obj.id !== task.id);\n        setTasks(newTasks);\n    }\n\n    const reorder = (list, startIndex, endIndex) => {\n        const result = Array.from(list);\n        const [removed] = result.splice(startIndex, 1);\n        result.splice(endIndex, 0, removed);\n\n        return result;\n    };\n\n    return (\n        <div>\n\n            <div className=\"container\">\n                <h1>Kanban</h1>\n                {\n                    !isOpenCreateTaskForm &&\n                    <button className=\"btn btn-primary p-1\" onClick={e => setIsOpenCreateTaskForm(true)}>Create task</button>\n                }\n                {\n                    isOpenCreateTaskForm &&\n                    <form>\n                        <div className=\"form-group p-1\">\n                            <label htmlFor=\"exampleInputEmail1\">Task</label>\n                            <input type=\"text\" className=\"form-control\" placeholder=\"Describe Your Task\"\n                                value={taskName} onChange={onTaskChange}/>\n                        </div>\n                        <button type=\"submit\" className=\"btn btn-primary m-1\"\n                                onClick={taskCreate}\n                                disabled={!isActiveButtonTaskCreate}\n                        >Submit</button>\n                        <button className=\"btn btn-secondary\" onClick={taskReset}>Cancel</button>\n                    </form>\n                }\n                <div className=\"row\">\n                {\n                    initStatuses\n                        .sort((a, b) => { return a.queue - b.queue} )\n                        .map(el =>\n                            <StatusesItem key={el.id}\n                                          status={el}\n                                          initStatuses={initStatuses}\n                                          tasks={tasks}\n                                          updateTask={updateTask}\n                                          deleteTask={deleteTask}\n                                          reorder={reorder}\n                                          setTasks={setTasks}\n                            />\n                        )\n                }\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}