{"version":3,"sources":["components/Tasks/TasksItem.js","components/Statuses/StatusesItem.js","App.js","serviceWorker.js","index.js"],"names":["TasksItem","props","useState","task","priorityString","priorities","find","el","id","priorityId","priority","showDeleteMode","e","preventDefault","showEditMode","draggableId","toString","index","provided","snapshot","className","ref","innerRef","draggableProps","dragHandleProps","style","isDragging","draggableStyle","background","name","href","onClick","class","tabindex","role","aria-labelledby","aria-hidden","type","data-dismiss","aria-label","StatusesItem","droppableId","status","isDraggingOver","tasks","map","statusId","key","statuses","updateTask","deleteTask","placeholder","queue","initTasks","uuidv4","push","App","data","setData","isOpenCreateTaskForm","setIsOpenCreateTaskForm","isActiveButtonTaskCreate","setIsActiveButtonTaskCreate","taskName","setTaskName","length","setPriority","taskReset","updatedTask","deletedTask","console","log","htmlFor","value","onChange","target","defaultValue","newTask","disabled","onDragEnd","result","source","destination","splice","removed","idx","sort","a","b","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.152cdc8b.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport {Draggable} from 'react-beautiful-dnd';\r\n\r\nconst iconPlus = (\r\n    <svg className=\"bi bi-caret-up\" width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\r\n        <path fillRule=\"evenodd\" d=\"M3.204 11L8 5.519 12.796 11H3.204zm-.753-.659l4.796-5.48a1 1 0 0 1 1.506 0l4.796 5.48c.566.647.106 1.659-.753 1.659H3.204a1 1 0 0 1-.753-1.659z\"/>\r\n    </svg>\r\n);\r\n\r\nconst iconDash = (\r\n    <svg className=\"bi bi-caret-down\" width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\r\n        <path fillRule=\"evenodd\" d=\"M3.204 5L8 10.481 12.796 5H3.204zm-.753.659l4.796 5.48a1 1 0 0 0 1.506 0l4.796-5.48c.566-.647.106-1.659-.753-1.659H3.204a1 1 0 0 0-.753 1.659z\"/>\r\n    </svg>\r\n);\r\n\r\nconst TasksItem = (props) => {\r\n\r\n    const [task, setTask] = useState(props.task);\r\n    const priorityString = props.priorities.find(el => el.id === task.priorityId).priority;\r\n\r\n    const onPriorityUp = (e) => {\r\n        e.preventDefault();\r\n        const updatedTask = {...task, priorityId: --task.priorityId};\r\n        setTask(updatedTask);\r\n        props.updateTask(updatedTask);\r\n    }\r\n\r\n    const onPriorityDown = (e) => {\r\n        e.preventDefault();\r\n        const updatedTask = {...task, priorityId: ++task.priorityId}\r\n        setTask(updatedTask);\r\n        props.updateTask(updatedTask);\r\n    }\r\n\r\n    const onDeleteTask = () => {\r\n        props.deleteTask(task);\r\n    }\r\n\r\n    const getItemStyle = (isDragging, draggableStyle) => ({\r\n        // change background colour if dragging\r\n        background: isDragging ? \"lightgrey\" : \"\",\r\n        // styles we need to apply on draggables\r\n        ...draggableStyle\r\n    });\r\n\r\n    const showDeleteMode = (e) => {\r\n        e.preventDefault();\r\n    }\r\n\r\n    const showEditMode = (e) => {\r\n        e.preventDefault();\r\n    }\r\n\r\n    // const stylePlus = {\r\n    //     pointerEvents: task.priorityId > 1 ? '' : 'none',\r\n    //     cursor: task.priorityId > 1 ? '' : 'not-allowed',\r\n    //     opacity: task.priorityId > 1 ? 1 : 0.2\r\n    // }\r\n    // const styleDash = {\r\n    //     pointerEvents: task.priorityId < 3 ? '' : 'none',\r\n    //     cursor: task.priorityId < 3 ? '' : 'not-allowed',\r\n    //     opacity: task.priorityId < 3 ? 1 : 0.2\r\n    // }\r\n\r\n\r\n    return (\r\n        <Draggable draggableId={task.id.toString()} index={props.index}>\r\n            {\r\n                (provided, snapshot)  => (\r\n                    <div className=\"card m-1\"\r\n                         ref={provided.innerRef}\r\n                        {...provided.draggableProps}\r\n                        {...provided.dragHandleProps}\r\n                        style={getItemStyle(\r\n                            snapshot.isDragging,\r\n                            provided.draggableProps.style\r\n                        )}\r\n                    >\r\n                        <div className=\"d-flex ml-auto\">\r\n                            <div className=\"card-text p-1\">\r\n                                {/*<a className=\"mr-1\" href=\"#\" onClick={onPriorityDown} style={styleDash}>{iconDash}</a>*/}\r\n                                {priorityString === 'High Priority' &&\r\n                                    <span className=\"badge badge-danger\">{priorityString}</span>\r\n                                }\r\n                                {priorityString === 'Medium Priority' &&\r\n                                    <span className=\"badge badge-warning\">{priorityString}</span>\r\n                                }\r\n                                {priorityString === 'Low Priority' &&\r\n                                    <span className=\"badge badge-success\">{priorityString}</span>\r\n                                }\r\n                                {/*<a className=\"ml-1\" href=\"#\" onClick={onPriorityUp} style={stylePlus}>{iconPlus}</a>*/}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"card-body p-2\">\r\n                            <div className=\"card-text p-1\">\r\n                                {task.name}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"card-footer d-flex\">\r\n                            <a className=\"card-link\" href=\"#\" onClick={showEditMode}>Edit</a>\r\n                            <a className=\"card-link ml-auto\" href=\"#\" onClick={showDeleteMode}>Delete</a>\r\n                        </div>\r\n                        <div class=\"modal fade\" id=\"exampleModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\r\n                            <div class=\"modal-dialog\" role=\"document\">\r\n                                <div class=\"modal-content\">\r\n                                    <div class=\"modal-header\">\r\n                                        <h5 class=\"modal-title\" id=\"exampleModalLabel\">Modal title</h5>\r\n                                        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n                                            <span aria-hidden=\"true\">&times;</span>\r\n                                        </button>\r\n                                    </div>\r\n                                    <div class=\"modal-body\">\r\n                                        ...\r\n                                    </div>\r\n                                    <div class=\"modal-footer\">\r\n                                        <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\r\n                                        <button type=\"button\" class=\"btn btn-primary\">Save changes</button>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n            )}\r\n        </Draggable>\r\n    );\r\n};\r\n\r\nexport default TasksItem;","import React from 'react';\r\nimport TasksItem from \"../Tasks/TasksItem\";\r\nimport { Droppable } from 'react-beautiful-dnd';\r\n\r\nconst StatusesItem = (props) => {\r\n\r\n    const getStatusStyle = (isDraggingOver) => ({\r\n        background: isDraggingOver ? '#f7f7f7' : '',\r\n    });\r\n\r\n    return (\r\n        <Droppable droppableId={props.status.id.toString()}>\r\n            {(provided, snapshot) => (\r\n                <div className=\"col-sm-3 p-1\"\r\n                     ref={provided.innerRef}\r\n                     style={getStatusStyle(snapshot.isDraggingOver)}\r\n                >\r\n                <h5 className=\"card-header text-center\">{props.status.name}</h5>\r\n                {\r\n                    props.status.tasks\r\n                        // .sort((a, b) => { return a.priorityId - b.priorityId} )\r\n                        .map((task, index) => {\r\n                            if(task.statusId === props.status.id)\r\n                                return (\r\n                                    <TasksItem key={task.id}\r\n                                               index={index}\r\n                                               statuses={props.statuses}\r\n                                               priorities={props.priorities}\r\n                                               task={task}\r\n                                               updateTask={props.updateTask}\r\n                                               deleteTask={props.deleteTask}\r\n                                    />\r\n                                );\r\n                        })\r\n                }\r\n                {provided.placeholder}\r\n                </div>\r\n            )}\r\n        </Droppable>\r\n    );\r\n};\r\n\r\nexport default StatusesItem;","import React, {useEffect, useState} from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport StatusesItem from \"./components/Statuses/StatusesItem\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\n\nconst statuses = [\n    {id: 1, tasks: [], queue: 1, name: 'To Do'},\n    {id: 2, tasks: [], queue: 2, name: 'In Progress'},\n    {id: 3, tasks: [], queue: 3, name: 'Review'},\n    {id: 4, tasks: [], queue: 4, name: 'Done'}\n]\n\nconst priorities = [\n    {id: 1, priority: 'High Priority'},\n    {id: 2, priority: 'Medium Priority'},\n    {id: 3, priority: 'Low Priority'}\n]\n\n//Many-to-one relation (many tasks to one status, and many tasks to one priority)\nconst initTasks = [\n    {id: uuidv4(), name: 'Which one?\\n' + 'In my opinion, Faker is the best among them. The only time this package won’t solve your needs is when you need fake data in some rare format or data type. Even then, I’d still recommend using Faker and reshaping what it generates, if possible.', priorityId: 1, statusId: 1},\n    {id: uuidv4(), name: 'Generating Users\\n' + 'Now for the good stuff! Generating 1000 fake user profiles is this easy (in bold is the Faker code, the rest is Pandas).', priorityId: 2, statusId: 2},\n    {id: uuidv4(), name: 'Again, there are way more fields available, you can find them all in the documentation. You can even make your own data providers, here’s a few already contributed by the community.', priorityId: 3, statusId: 2},\n    {id: uuidv4(), name: 'Faker also supports multiple languages, running via the command line, and seeding the randomizer to get consistent results.', priorityId: 1, statusId: 3},\n    {id: uuidv4(), name: 'Hopefully, this saves you some time! I use Faker to generate data for stress tests, speed tests, and even test model pipelines for errors.', priorityId: 2, statusId: 3},\n    {id: uuidv4(), name: 'Fill form input fields with fake random data.\\n' + 'After installation you will have to reload the tabs that are already open for the extension to work properly inside them', priorityId: 3, statusId: 3},\n    {id: uuidv4(), name: 'Generate random names, emails, addresses, phone numbers and many more types of data.', priorityId: 2, statusId: 1},\n    {id: uuidv4(), name: 'No configuration or initial setup required, unless you want to. Just right click on any input field and choose what type of data to insert.', priorityId: 3, statusId: 1},\n    {id: uuidv4(), name: 'Fill single fields or entire form at once.', priorityId: 1, statusId: 4}\n];\n\nstatuses.map(status =>\n    initTasks.map(task => {\n        if(task.statusId === status.id){\n            status.tasks.push(task);\n        }\n    })\n);\n\nfunction App() {\n\n    const [data, setData] = useState(statuses);\n    const [isOpenCreateTaskForm, setIsOpenCreateTaskForm] = useState(false);\n    const [isActiveButtonTaskCreate, setIsActiveButtonTaskCreate] = useState(false);\n    const [taskName, setTaskName] = useState('');\n    const [priority, setPriority] = useState(priorities[priorities.length - 1].id);\n\n    const onTaskChange = (e) => {\n        setIsActiveButtonTaskCreate(e.target.value.length > 4);\n        setTaskName(e.target.value);\n    }\n\n    const taskCreate = (e) => {\n        e.preventDefault();\n        const newTask = {\n            id: uuidv4(),\n            name: taskName,\n            priorityId: +priority,\n            statusId: 1\n        };\n        data.map(status => {\n            if(newTask.statusId === status.id){\n                status.tasks.push(newTask);\n            }\n        });\n        taskReset();\n    }\n\n    const taskReset = (e) => {\n        setTaskName('');\n        setPriority(priorities[priorities.length - 1].id);\n        setIsOpenCreateTaskForm(false);\n        setIsActiveButtonTaskCreate(false);\n    }\n\n    const updateTask = (updatedTask) => {\n        data.map(status =>\n            status.tasks.map(task => {\n                if(task.id === updatedTask.id){\n                    task.name = updatedTask.name;\n                    task.priorityId = updatedTask.priorityId;\n                    task.statusId = updatedTask.statusId;\n                }\n            })\n        )\n    }\n\n    const deleteTask = (deletedTask) => {\n        console.log(deletedTask)\n    }\n\n    const onDragEnd = (result) => {\n        const {source, destination} = result;\n\n        if (!destination) {\n            return;\n        }\n\n        if (source.droppableId === destination.droppableId) {\n            const [removed] = data[source.droppableId - 1].tasks.splice(source.index, 1);\n            data[source.droppableId - 1].tasks.splice(destination.index, 0, removed);\n        } else {\n\n            const [removed] = data[source.droppableId - 1].tasks.splice(source.index, 1);\n            data[destination.droppableId - 1].tasks.splice(destination.index, 0, removed);\n            data.map((el, idx) =>\n                el.tasks.map(task =>\n                    task.id === removed.id ? task.statusId = idx + 1 : ''\n                )\n            );\n        }\n        setData(data);\n    }\n\n    return (\n        <div>\n\n            <div className=\"container\">\n                <h1>Kanban</h1>\n                {\n                    !isOpenCreateTaskForm &&\n                    <button className=\"btn btn-primary p-1\" onClick={e => setIsOpenCreateTaskForm(true)}>Create task</button>\n                }\n                {\n                    isOpenCreateTaskForm &&\n                    <form>\n                        <div className=\"form-group p-1\">\n                            <label htmlFor=\"exampleInputEmail1\">Task</label>\n                            <input type=\"text\" className=\"form-control\" placeholder=\"Describe Your Task\"\n                                value={taskName} onChange={onTaskChange}/>\n                        </div>\n\n                        <div className=\"input-group input-group-sm mb-2 mt-2\">\n                            <div className=\"input-group-prepend\">\n                                <label className=\"input-group-text\" htmlFor=\"inputGroupSelect01\">Priority:</label>\n                            </div>\n                            <select className=\"custom-select\" id=\"inputGroupSelect01\" defaultValue={priority} onChange={(e) => setPriority(e.target.value)}>\n                                {\n                                    priorities.map(el => {\n                                        return <option key={el.id} value={el.id}>{el.priority}</option>\n                                    })\n                                }\n                            </select>\n                        </div>\n\n                        <button type=\"submit\" className=\"btn btn-primary m-1\"\n                                onClick={taskCreate}\n                                disabled={!isActiveButtonTaskCreate}\n                        >Submit</button>\n                        <button className=\"btn btn-secondary\" onClick={taskReset}>Cancel</button>\n                    </form>\n                }\n                <div className=\"row\">\n                    <DragDropContext onDragEnd={onDragEnd}>\n                    {\n                        data\n                            .sort((a, b) => { return a.queue - b.queue} )\n                            .map(el =>\n                                <StatusesItem key={el.id}\n                                              status={el}\n                                              statuses={statuses}\n                                              priorities={priorities}\n                                              updateTask={updateTask}\n                                              deleteTask={deleteTask}\n                                />\n                            )\n                    }\n                    </DragDropContext>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}