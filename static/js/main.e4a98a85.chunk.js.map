{"version":3,"sources":["components/Tasks/TasksItem.js","components/Statuses/StatusesItem.js","App.js","serviceWorker.js","index.js"],"names":["TasksItem","props","useState","task","setTask","title","name","substr","className","type","onClick","deleteTask","aria-label","aria-hidden","htmlFor","id","defaultValue","statusId","onChange","e","updatedTask","target","value","updateTask","initStatuses","map","el","key","priority","StatusesItem","status","tasks","sort","a","b","queue","initTasks","App","setTasks","lastTaskId","setLastTaskId","isOpenCreateTaskForm","setIsOpenCreateTaskForm","isActiveButtonTaskCreate","setIsActiveButtonTaskCreate","taskName","setTaskName","taskReset","updatedTasks","obj","newTasks","filter","placeholder","length","preventDefault","newTask","disabled","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e4a98a85.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\n\r\nconst TasksItem = (props) => {\r\n\r\n    const [task, setTask] = useState(props.task);\r\n    // const [show, setShow] = useState(\"\");\r\n\r\n    const title = task.name.substr(0, 3) + \"...\";\r\n\r\n    const onPriorityUp = () => {\r\n        const updatedTask = {...task, priority: --task.priority};\r\n        setTask(updatedTask);\r\n        props.updateTask(updatedTask);\r\n    }\r\n\r\n    const onPriorityDown = () => {\r\n        const updatedTask = {...task, priority: ++task.priority}\r\n        setTask(updatedTask);\r\n        props.updateTask(updatedTask);\r\n    }\r\n\r\n    const onStatusChange = (e) => {\r\n        // e.preventDefault();\r\n        const updatedTask = {...task, statusId: +e.target.value};\r\n        setTask(updatedTask);\r\n        props.updateTask(updatedTask);\r\n        // setShow(\"\");\r\n    }\r\n\r\n    const onDeleteTask = () => {\r\n        props.deleteTask(task);\r\n    }\r\n\r\n    // const onToggleDropdown = (e) => {\r\n    //     e.preventDefault();\r\n    //     setShow(!show ? \" show\" : \"\");\r\n    // }\r\n\r\n    return (\r\n        <div className=\"card m-1\">\r\n            <div className=\"card-body\">\r\n                <button type=\"button\" className=\"close text-right\" onClick={onDeleteTask} aria-label=\"Delete\">\r\n                    <span aria-hidden=\"true\">&times;</span>\r\n                </button>\r\n                <h5 className=\"card-title\">{title}</h5>\r\n                <p className=\"card-text p-1\">\r\n                    {task.name}\r\n                </p>\r\n                <div className=\"input-group input-group-sm mb-2 mt-2\">\r\n                    <div className=\"input-group-prepend\">\r\n                        <label className=\"input-group-text\" htmlFor=\"inputGroupSelect01\">Status:</label>\r\n                    </div>\r\n                    <select className=\"custom-select\" id=\"inputGroupSelect01\" defaultValue={task.statusId} onChange={onStatusChange}>\r\n                        {\r\n                            props.initStatuses.map(el => {\r\n                                return <option key={el.id} value={el.id}>{el.name}</option>\r\n                            })\r\n                        }\r\n                    </select>\r\n                </div>\r\n                <div className=\"btn-group-vertical btn-group-sm\" aria-label={\"Priority: \" + task.priority}>\r\n                    Priority: {task.priority}\r\n                    {\r\n                        task.priority > 1 &&\r\n                        <button className=\"btn btn-secondary\" onClick={onPriorityUp} type=\"button\">Up</button>\r\n                    }\r\n                    {\r\n                        task.priority < 10 &&\r\n                        <button className=\"btn btn-secondary\" onClick={onPriorityDown} type=\"button\">Down</button>\r\n                    }\r\n                </div>\r\n                {/*This bootstrap dropdown doesn't work */}\r\n                {/*<div className=\"dropdown\">*/}\r\n                {/*    <button className=\"btn btn-secondary btn-sm dropdown-toggle\" type=\"button\" id=\"dropdownMenuButton\"*/}\r\n                {/*            data-toggle=\"dropdown\" aria-haspopup={true} aria-expanded={false}*/}\r\n                {/*            onClick={onToggleDropdown}>*/}\r\n                {/*        {props.initStatuses.map(el => {*/}\r\n                {/*            if(el.id === task.statusId)*/}\r\n                {/*                return el.name*/}\r\n                {/*        })}*/}\r\n                {/*    </button>*/}\r\n                {/*    <div className={\"dropdown-menu\" + show} aria-labelledby=\"dropdownMenuButton\">*/}\r\n                {/*        {*/}\r\n                {/*            props.initStatuses.filter(el =>*/}\r\n                {/*                el.id !== task.statusId*/}\r\n                {/*            ).map(el =>*/}\r\n                {/*                <a className=\"dropdown-item\" key={el.id} id={el.id} onClick={onStatusChange} href=\"#\">{el.name}</a>*/}\r\n                {/*            )*/}\r\n                {/*        }*/}\r\n                {/*    </div>*/}\r\n                {/*</div>*/}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TasksItem;","import React from 'react';\r\nimport TasksItem from \"../Tasks/TasksItem\";\r\n\r\nconst StatusesItem = (props) => {\r\n    return (\r\n        <div className=\"col-sm-3 p-1\">\r\n            <h5 className=\"card-header text-center\">{props.status.name}</h5>\r\n            {\r\n                props.tasks\r\n                    .sort((a, b) => { return a.priority - b.priority} )\r\n                    .map(task => {\r\n                        if(task.statusId === props.status.id)\r\n                            return (\r\n                                <TasksItem key={task.id}\r\n                                           initStatuses={props.initStatuses}\r\n                                           task={task}\r\n                                           updateTask={props.updateTask}\r\n                                           deleteTask={props.deleteTask}\r\n                                />\r\n                            );\r\n                    })\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default StatusesItem;","import React, {useState} from 'react';\nimport StatusesItem from \"./components/Statuses/StatusesItem\";\n\n//not so good variant\n// const tasks1 = {\n//     todo: [\n//         {name: 'Create F1', priority: 1},\n//         {name: 'Create F2', priority: 1}\n//         ],\n//     progress: [],\n//     review: [],\n//     done: []\n// };\n\n//good variant\n// const statuses = {\n//     s1: {name: 'To Do'},\n//     s2: {name: 'In Progress'},\n//     s3: {name: 'Review'},\n//     s4: {name: 'Done'},\n// }\n\nconst initStatuses = [\n    {id: 1, queue: 1, name: 'To Do'},\n    {id: 2, queue: 2, name: 'In Progress'},\n    {id: 3, queue: 3, name: 'Review'},\n    {id: 4, queue: 4, name: 'Done'}\n]\n//Many-to-one relation (many tasks to one status)\nconst initTasks = [\n    {id: 1, name: 'Aaa aaa aaa', priority: 1, statusId: 1},\n    {id: 2, name: 'Bbb bbb bbb', priority: 1, statusId: 2},\n    {id: 3, name: 'Ccc ccc ccc', priority: 2, statusId: 2},\n    {id: 4, name: 'Ddd ddd ddd', priority: 3, statusId: 3},\n    {id: 5, name: 'Eee eee eee', priority: 2, statusId: 3},\n    {id: 6, name: 'Fff fff fff', priority: 1, statusId: 3},\n    {id: 7, name: 'Ggg ggg ggd', priority: 3, statusId: 1},\n    {id: 8, name: 'Iii iii iii', priority: 2, statusId: 1},\n    {id: 9, name: 'Kkk kkk kkk', priority: 1, statusId: 4}\n];\n\nfunction App() {\n\n    const [tasks, setTasks] = useState(initTasks);\n    const [lastTaskId, setLastTaskId] = useState(9);\n    const [isOpenCreateTaskForm, setIsOpenCreateTaskForm] = useState(false);\n    const [isActiveButtonTaskCreate, setIsActiveButtonTaskCreate] = useState(false);\n    const [taskName, setTaskName] = useState('');\n\n    const onTaskChange = (e) => {\n        setIsActiveButtonTaskCreate(e.target.value.length > 4);\n        setTaskName(e.target.value);\n    }\n\n    const taskCreate = (e) => {\n        e.preventDefault();\n        const newTask = {\n            id: lastTaskId + 1,\n            name: taskName,\n            priority: 1,\n            statusId: 1\n\n        };\n        setLastTaskId(newTask.id);\n        setTasks([...tasks, newTask]);\n        taskReset();\n    }\n\n    const taskReset = (e) => {\n        setTaskName('');\n        setIsOpenCreateTaskForm(false);\n        setIsActiveButtonTaskCreate(false);\n    }\n\n    const updateTask = (task) => {\n        const updatedTasks = tasks.map(obj => {\n            if(obj.id === task.id){\n                return {...obj, name: task.name, priority: task.priority, statusId: task.statusId};\n            } else {\n                return obj;\n            }\n        })\n        setTasks(updatedTasks);\n    }\n\n    const deleteTask = (task) => {\n        const newTasks = tasks.filter(obj => obj.id !== task.id);\n        setTasks(newTasks);\n    }\n\n    return (\n        <div>\n\n            <div className=\"container\">\n                <h1>Kanban</h1>\n                {\n                    !isOpenCreateTaskForm &&\n                    <button className=\"btn btn-primary p-1\" onClick={e => setIsOpenCreateTaskForm(true)}>Create task</button>\n                }\n                {\n                    isOpenCreateTaskForm &&\n                    <form>\n                        <div className=\"form-group p-1\">\n                            <label htmlFor=\"exampleInputEmail1\">Task</label>\n                            <input type=\"text\" className=\"form-control\" placeholder=\"Describe Your Task\"\n                                value={taskName} onChange={onTaskChange}/>\n                        </div>\n                        <button type=\"submit\" className=\"btn btn-primary m-1\"\n                                onClick={taskCreate}\n                                disabled={!isActiveButtonTaskCreate}\n                        >Submit</button>\n                        <button className=\"btn btn-secondary\" onClick={taskReset}>Cancel</button>\n                    </form>\n                }\n                <div className=\"row\">\n                {\n                    initStatuses\n                        .sort((a, b) => { return a.queue - b.queue} )\n                        .map(el =>\n                            <StatusesItem key={el.id}\n                                          status={el}\n                                          initStatuses={initStatuses}\n                                          tasks={tasks}\n                                          updateTask={updateTask}\n                                          deleteTask={deleteTask}\n                            />\n                        )\n                }\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}